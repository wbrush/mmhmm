{
  "consumes": [
    "application/vnd.api+json",
    "application/json"
  ],
  "produces": [
    "application/vnd.api+json",
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "the purpose of this service is to provide a manager for multi-user note persistence\nservice. Since the service supports postgresql, we will start there",
    "title": "Notes Manager",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/info": {
      "get": {
        "description": "returns memory stats, cpu stats, and other information useful in debugging problems in deployed service.",
        "produces": [
          "application/json",
          "application/text"
        ],
        "tags": [
          "basicCommands"
        ],
        "summary": "Get basic service information to aid in debugging.",
        "operationId": "basicInfo",
        "parameters": [
          {
            "type": "string",
            "description": "standard {Accept} header values",
            "name": "Accept",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BasicInfoStruct"
            }
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "entries"
        ],
        "operationId": "listNotes"
      },
      "post": {
        "description": "returns new Template",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "entries"
        ],
        "summary": "Create new Template",
        "operationId": "createNote",
        "parameters": [
          {
            "description": "Template object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalTemplateStruct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GlobalTemplateStruct"
            }
          }
        }
      }
    },
    "/notes/{id}": {
      "get": {
        "description": "returns Template",
        "produces": [
          "application/json"
        ],
        "tags": [
          "entries"
        ],
        "summary": "Get Template by given id",
        "operationId": "getNote",
        "parameters": [
          {
            "type": "number",
            "description": "Numeric ID of the Template to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GlobalTemplateStruct"
            }
          }
        }
      },
      "put": {
        "tags": [
          "entries"
        ],
        "operationId": "updateNote"
      },
      "delete": {
        "description": "Numeric ID of the Template to delete",
        "tags": [
          "entries"
        ],
        "operationId": "DeleteNote"
      }
    },
    "/ping": {
      "get": {
        "description": "returns clean JSON object to check that everything is fine",
        "produces": [
          "application/json"
        ],
        "tags": [
          "basicCommands"
        ],
        "summary": "Get basic service information to aid in debugging.",
        "operationId": "basicPing",
        "parameters": [
          {
            "type": "string",
            "description": "standard \"Accept\" header values",
            "name": "Accept",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK; returns empty page or json structure"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "description": "returns users list",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Return list of users",
        "operationId": "listUsers",
        "parameters": [
          {
            "description": "on which field results must to be ordered",
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filters on fields, which can be provided in format described here: https://godoc.org/github.com/go-pg/pg/urlvalues#Filter",
            "name": "filters",
            "in": "query",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserStruct"
              }
            }
          }
        }
      },
      "post": {
        "description": "returns new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create new user",
        "operationId": "CreateUser",
        "parameters": [
          {
            "description": "User object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserStruct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserStruct"
            }
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "description": "returns user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User by given id",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "number",
            "description": "Numeric ID of the user to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserStruct"
            }
          }
        }
      },
      "put": {
        "description": "returns user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User by given id",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "number",
            "description": "Numeric ID of the user to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserStruct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserStruct"
            }
          }
        }
      },
      "delete": {
        "description": "returns id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete user by given id",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "number",
            "description": "Numeric ID of the User to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BasicInfoStruct": {
      "type": "object",
      "properties": {
        "alloc_heap_total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Alloc_heap_total"
        },
        "alloc_system_total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Alloc_system_total"
        },
        "build_date": {
          "type": "string",
          "x-go-name": "BuiltOn"
        },
        "cpus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cpus"
        },
        "est_max_heap": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Est_max_heap"
        },
        "max_stack": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Stack_max"
        },
        "num_cgo_calls": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Num_cgo_calls"
        },
        "num_go_routines": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Num_go_routines"
        },
        "used_stack": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Used_stack"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "JsonValues",
      "x-go-package": "github.com/wbrush/mmhmm/services/api"
    },
    "UserStruct": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "lastName": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "userId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        }
      },
      "x-go-name": "User",
      "x-go-package": "github.com/wbrush/mmhmm/models"
    }
  },
  "securityDefinitions": {
    "wbrush_apikey": {
      "type": "apiKey",
      "name": "KEY",
      "in": "header"
    },
    "wbrush_oauth2": {
      "description": "example",
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://localhost/oauth2/auth",
      "tokenUrl": "https://localhost/oauth2/token",
      "scopes": {
        "read_scope": "description here",
        "write_scope": "description here"
      }
    }
  },
  "security": [
    {
      "wbrush_apikey": []
    },
    {
      "wbrush_oauth2": []
    }
  ]
}